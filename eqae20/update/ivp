#!/bin/sh

. zospmsetenv
export PATH=$ZOSPM_ROOT/testtools:$PATH

copyasciifile() {
#	set +x
	iconvsrc=$1
	iconvtgt=$2
	tmp=${ZOSPM_TMP}/$$.iconv
	iconv -fISO8859-1 -tIBM-1047 <"${iconvsrc}" >"${tmp}"
	if [ $? -gt 0 ]; then
		"IVP: iconv failed copying from "${src}" to temporary file: ${tmp}" >&2
		return 16
	fi
	dcp "${tmp}" "${iconvtgt}"
	if [ $? -gt 0 ]; then
		"IVP: dcp failed copying from temporary file "${tmp}" to ${iconvtgt}" >&2
		return 16
	fi
	rm ${tmp}
	return 0
}

cleanup() {
#	set +x
	msg="$1"
	keepds="$2"
	keepmem="$3"

	rmlist=""	
	for ds in ${datasets}; do
		if [ "${ds}" = "${keepds}" ]; then
			summary="Dataset: ${keepds}(${keepmem}) retained."
			continue;
		fi
		rmlist="${ds} ${rmlist}"
	done

	drm -f "$rmlist"
	echo "${msg} ${summary}" >&2
	exit 16
}

createdatasets() {
#	set +x
	#
	# Create temporary datasets
	#
	src=`mvstmp ${ZOSPM_TGT_HLQ}IVPSRC`
	list=`mvstmp ${ZOSPM_TGT_HLQ}IVPLST`
	fblist=`mvstmp ${ZOSPM_TGT_HLQ}IVPFBLST`
	adata=`mvstmp ${ZOSPM_TGT_HLQ}IVPADA`
	obj=`mvstmp ${ZOSPM_TGT_HLQ}IVPOBJ`
	langx=`mvstmp ${ZOSPM_TGT_HLQ}IVPLGX`
	cdbg=`mvstmp ${ZOSPM_TGT_HLQ}IVPCDBG`
	mod=`mvstmp ${ZOSPM_TGT_HLQ}IVPMOD`
	lib=`mvstmp ${ZOSPM_TGT_HLQ}IVPLIB`
	insplog=`mvstmp ${ZOSPM_TGT_HLQ}IVPLOG`
	sysprint=`mvstmp ${ZOSPM_TGT_HLQ}IVPPRT`
	pmap=`mvstmp ${ZOSPM_TGT_HLQ}IVPPMAP`
	sysout=`mvstmp ${ZOSPM_TGT_HLQ}IVPOUT`
	dbgcmd=`mvstmp ${ZOSPM_TGT_HLQ}IVPCMD`

	datasets="${src} ${list} ${fblist} ${pmap} ${adata} ${obj} ${langx} ${cdbg} ${mod} ${lib} ${insplog} ${sysprint} ${sysout} ${dbgcmd}"

	dtouch -tpdse ${src}
	chk "$?" "Unable to allocate ${src}"
	dtouch -tseq -l1562 -rvb -s5m ${langx}
	chk "$?" "Unable to allocate ${langx}"
	dtouch -tpdse ${obj}
	chk "$?" "Unable to allocate ${obj}"
	dtouch -tpdse ${cdbg}
	chk "$?" "Unable to allocate ${cdbg}"
	dtouch -tpds -ru ${mod}
	chk "$?" "Unable to allocate ${mod}"
	dtouch -tpdse -ru ${lib}
	chk "$?" "Unable to allocate ${lib}"
	dtouch -tpdse -rvb -l32756 ${adata}
	chk "$?" "Unable to allocate ${adata}"
	dtouch -tpdse -rvba -l137 ${list}
	chk "$?" "Unable to allocate ${list}"
	dtouch -tpdse -rvba -l137 ${pmap}
	chk "$?" "Unable to allocate ${pmap}"
	dtouch -tpdse -rfb -l133 ${fblist}
	chk "$?" "Unable to allocate ${fblist}"
	dtouch -tpdse -rfb -l72 ${insplog}
	chk "$?" "Unable to allocate ${insplog}"
	dtouch -tpdse -rvb -l137 ${sysprint}
	chk "$?" "Unable to allocate ${sysprint}"
	dtouch -tpdse ${sysout}
	chk "$?" "Unable to allocate ${sysout}"
	dtouch -tpdse ${dbgcmd}
	chk "$?" "Unable to allocate ${dbgcmd}"
}

deletedatasets() {
#	set +x
	drm -f "${datasets}"
}

ivppli() {
#	set +x
	# PL/I IVP
	plisrc=iqivpf.pli
	pgm=IQIVPF
	#
	# compile
	#
	copyasciifile "${srcroot}${plisrc}" "${src}(${pgm})"
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: Copy of PL/I source failed with rc: $rc. Source Dataset retained" "${src}" "${pgm}PL"
	fi

	export steplib="${ZOSPM_IBMHLQ}.SIBMZCMP:${ZOSPM_CEEHLQ}.SCEERUN"
	export args="TEST(ALL,SYM,NOHOOK) NEST SYSTEM(MVS) NTERM STG S OP XREF NOPT INSOURCE"
	export sysplin="${obj}(${pgm}PL)"
	mvscmd --pgm=IBMZPLI --args="${args}" --syslin="${sysplin}" --sysprint="${list}(${pgm}PL)" --sysin="${src}(${pgm})"
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: PL/I compile failed with rc: $rc. Listing retained" "${list}" "${pgm}PL"
	fi

	export steplib="${ZOSPM_CEEHLQ}.SCEERUN"
	export sysmsgs="${ZOSPM_CEEHLQ}.SCEEMSGP(EDCPMSGE)"
	export sysmod="${obj}(${pgm})"
	export plprint="${list}(${pgm}P)"
	mvscmd --pgm=EDCPRLK --args='NOMAP' --steplib="${steplib}" --sysout=dummy --syslib=dummy --sysdefsd=dummy --sysmsgs="${sysmsgs}" --sysin="${sysplin}" --sysmod="${sysmod}" --sysprint="${plprint}" 
	rc=$?
	if [ $rc -gt 4 ]; then
		cleanup "IVP: PL/I prelink failed with rc: $rc. Listing retained" "${list}" "${pgm}P"
	fi

	#
	# link
	#
	export syslib="${ZOSPM_CEEHLQ}.SCEELKED"
	mvscmd --pgm=IEWBLINK --args="MAP" --object="${obj}(${pgm})" --syslib="${syslib}" --sysprint="${list}(${pgm}MP)" --syslmod="${lib}(${pgm})" --syslin="${sysmod}"
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: COBOL link failed with rc: $rc. Listing retained" "${list}" "${pgm}MP"
	fi

	#
	# go
	#
	plicmdsrc="iqivpf.cmd"
	copyasciifile "${srcroot}${plicmdsrc}" "${dbgcmd}(${pgm})"
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: Copy of PL/I debug command file failed with rc: $rc. Command file retained" "${dbgcmd}" "${pgm}"
	fi

	export steplib="${lib}:${ZOSPM_TGT_HLQ}EQAE20.SEQAMOD:${ZOSPM_CEEHLQ}.SCEERUN"
	mvscmd --pgm="${pgm}" --args='TEST(ALL,INSPIN,PROMPT,*)/' --steplib="${steplib}" --inspin="${dbgcmd}(${pgm})" --insplog="${insplog}(${pgm})" --sysout="${sysout}(${pgm})" --sysprint="${sysprint}(${pgm})"
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: PL/I Run failed with rc: $rc. SYSOUT retained" "${sysout}" "${pgm}"
	fi
	dcp "${insplog}(${pgm})" /tmp/pli.actual
	mdiff "${srcroot}/pli.expected" /tmp/pli.actual
	return $?
}

ivpcobol() {
#	set -x
	# COBOL IVP
	cobsrc=progt.cobol
	pgm=PROGT
	#
	# compile
	#
	copyasciifile "${srcroot}${cobsrc}" "${src}(${pgm})"
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: Copy of COBOL source failed with rc: $rc. Source Dataset retained" "${src}" "${pgm}"
	fi

	tempdd='SYSUT1 SYSUT2 SYSUT3 SYSUT4 SYSUT5 SYSUT6 SYSUT7 SYSUT8 SYSUT9 SYSUT10 SYSUT11 SYSUT12 SYSUT13 SYSUT14 SYSUT15 SYSMDECK'
	tempparm=''
	for dd in $tempdd; do
		tempparm="${tempparm} --${dd}=TEMP,VIO"
	done
	export steplib="${ZOSPM_IGYHLQ}.SIGYCOMP:${ZOSPM_CEEHLQ}.SCEERUN:${ZOSPM_CEEHLQ}.SCEERUN2"
	export args="NONAME,NOTERM,TEST"
	mvscmd --pgm=IGYCRCTL --args="${args}" ${tempparm} --syslin="${obj}(${pgm})" --sysprint="${fblist}(${pgm})" --sysin="${src}(${pgm})"
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: COBOL compile failed with rc: $rc. Listing retained" "${fblist}" "${pgm}"
	fi

	#
	# link
	#
	export syslib="${ZOSPM_CEEHLQ}.SCEELKED:${ZOSPM_CEEHLQ}.SCEELKEX"
	mvscmd --pgm=IEWBLINK --args="MAP" --object="${obj}(${pgm})" --syslib="${syslib}" --sysprint="${list}(${pgm}MP)" --syslmod="${lib}(${pgm})" --syslin=stdin <<zz
  INCLUDE OBJECT(${pgm})
  NAME ${pgm}(R)
zz
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: COBOL link failed with rc: $rc. Listing retained" "${list}" "${pgm}MP"
	fi

	#
	# go
	#
	cobcmdsrc="progt.cmd"
	copyasciifile "${srcroot}${cobcmdsrc}" "${dbgcmd}(${pgm})"
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: Copy of COBOL debug command file failed with rc: $rc. Command file retained" "${dbgcmd}" "${pgm}"
	fi

	export steplib="${lib}:${ZOSPM_TGT_HLQ}EQAE20.SEQAMOD:${ZOSPM_CEEHLQ}.SCEERUN:${ZOSPM_CEEHLQ}.SCEERUN2"
	mvscmd --pgm="${pgm}" --args='/TEST(,CMDS,;,*) TRAP(ON)' --steplib="${steplib}" --cmds="${dbgcmd}(${pgm})" --insplog="${insplog}(${pgm})" --sysout="${sysout}(${pgm}G)"
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: COBOL Run failed with rc: $rc. Listing retained" "${list}" "${pgm}G"
	fi

	dcp "${insplog}(${pgm})" /tmp/cobol.actual
	mdiff "${srcroot}/cobol.expected" /tmp/cobol.actual
	return $?
}

ivpc() {
#	set -x
	#
	# C IVP
	#

	pgm=EQAWCINM

	opts='/xplink goff noopt,source,debug(format(dwarf),hook(line,noblock,path),symbol),xplink,rent'
	steplib="${ZOSPM_CEEHLQ}.SCEERUN2:${ZOSPM_CBCHLQ}.SCCNCMP:${ZOSPM_CEEHLQ}.SCEERUN"
	syslib="${ZOSPM_CEEHLQ}.SCEEH.H:${ZOSPM_CEEHLQ}.SCEEH.SYS.H"
	mvscmd --pgm=CCNDRVR --args="${opts}" --steplib="${steplib}" --syslin="${obj}(${pgm})" --syscdbg="${cdbg}(${pgm})" --syslib="${syslib}" --sysin="${ZOSPM_SRC_HLQ}EQAE20.SEQASAMP(${pgm})" --sysout=* --sysprint=*
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: Compile failed with rc: $rc. Listing retained" "${list}" "${pgm}"
	fi

	#
	# Bind C code 
	#
	opts='AMODE=31,MAP,RENT,DYNAM=DLL,CASE=MIXED,LIST=NOIMP'
	steplib="${ZOSPM_CEEHLQ}.SCEERUN2:${ZOSPM_CEEHLQ}.SCEERUN"
	syslin="${obj}(${pgm}):${ZOSPM_CEEHLQ}.SCEELIB(CELHS003):${ZOSPM_CEEHLQ}.SCEELIB(CELHS001)"
	mvscmd --pgm=IEWL --args="${opts}" --steplib="${steplib}" --syslib=${ZOSPM_CEEHLQ}.SCEEBND2 --object=${obj} --syslmod="${lib}(${pgm})" --sysprint="${list}(${pgm})" --syslin="${syslin}" --sysdefsd=dummy 
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: C Bind failed with rc: $rc. Listing retained" "${list}" "${pgm}"
	fi

	#
	# Run C code under debugger
	#
	ccmdsrc=eqawcinm.cmd
	copyasciifile "${srcroot}${ccmdsrc}" "${dbgcmd}(${pgm})"
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: Copy of C debug command file failed with rc: $rc. Command file retained" "${dbgcmd}" "${pgm}"
	fi
	steplib="${lib}:${ZOSPM_TGT_HLQ}EQAE20.SEQAMOD:${ZOSPM_CEEHLQ}.SCEERUN"
	runargs="test(,CMDS,;,*) trap(on)/"
	mvscmd --pgm=${pgm} --args="${runargs}" --steplib="${steplib}" --insplog="${insplog}(${pgm})" --cmds="${dbgcmd}(${pgm})" --sysout="${sysout}(${pgm})" 

	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: C Run failed with rc: $rc. Listing retained" "${list}" "${pgm}"
	fi
	dcp "${insplog}(${pgm})" /tmp/c.actual
	mdiff "${srcroot}/c.expected" /tmp/c.actual
	return $?
}

ivpasm() {
#	set +x
	#
	# Assembler IVP
	#

	asmsrc=dtivpa.as
	pgm=DTIVPA
	#
	# assemble
	#
	copyasciifile "${srcroot}${asmsrc}" "${src}(${pgm})"
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: Copy of assembler source failed with rc: $rc. Source Dataset retained" "${src}" "${pgm}"
	fi

	mvscmd --pgm=ASMA90 --args='ADATA,OBJECT' --syslin="${obj}(${pgm})" --sysprint="${list}(${pgm})" --sysadata="${adata}(${pgm})" --syslib=${ZOSPM_CEEHLQ}.SCEEMAC --sysin="${src}(${pgm})"
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: Assemble failed with rc: $rc. Listing retained" "${list}" "${pgm}"
	fi

	#
	# Extract Debug Data into EQALANGX format
	#
	steplib="${ZOSPM_TGT_HLQ}EQAE20.SIPVMODA:${ZOSPM_CEEHLQ}.SCEERUN"
	mvscmd --pgm=EQALANGX --args='(ASM ERROR' --steplib="${steplib}" --sysadata="${adata}(${pgm})" --idilangx="${langx}" --sysprint="${sysprint}(${pgm}LG)"
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: EQALANGX failed with rc: $rc. $rc. SYSADATA retained" "${adata}" "${pgm}"
	fi

	#
	# Link assembler code 
	#
	mvscmd --pgm=HEWL --args='MAP' --syslib=${ZOSPM_CEEHLQ}.SCEELKED --object=${obj} --syslmod=${mod} --sysprint="${list}(${pgm}LK)" --syslin=stdin <<zz
  INCLUDE OBJECT(DTIVPA)
  NAME DTIVPA(R)
zz
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: Link failed with rc: $rc. Listing retained" "${list}" "${pgm}LK"
	fi

	#
	# Run assembler code under debugger
	#
	asmcmdsrc=dtivpa.cmd
	copyasciifile "${srcroot}${asmcmdsrc}" "${dbgcmd}(${pgm})"
	rc=$?
	if [ $rc -gt 0 ]; then
		cleanup "IVP: Copy of assembler debug command file failed with rc: $rc. Command file retained" "${dbgcmd}" "${pgm}"
	fi
	steplib="${mod}:${ZOSPM_TGT_HLQ}EQAE20.SEQAMOD:${ZOSPM_CEEHLQ}.SCEERUN"
	runargs='TEST(ERROR,INSPIN,,*)/'
	mvscmd --pgm=DTIVPA --args="${runargs}" --steplib="${steplib}" --eqalangx="${langx}" --insplog="${insplog}(${pgm})" --inspin="${dbgcmd}(${pgm})" --sysout="${sysout}(${pgm}G)" 

	rc=$?
	# MSF - for now treat things as 'ok' if it's an RC 8 because mvscmd is complaining when it can not free the (already freed?) ddname EQALANGX
	if [ $rc -gt 8 ]; then
		cleanup "IVP: Run failed with rc: $rc. Listing retained" "${list}" "${pgm}G"
	fi
	dcp "${insplog}(${pgm})" /tmp/asm.actual
	mdiff "${srcroot}/asm.expected" /tmp/asm.actual
	return $?
}

# 
# Run IVP for assembler, COBOL, PL/I and C
#
createdatasets

srcroot="${ZOSPM_REPOROOT}/zospm-eqa/eqae20/update/src/"

zospmswinstalled asm
if [ $? -gt 0 ]; then
	ivpasm
	if [ $? -gt 0 ]; then
		exit $?
	fi
else 
	echo "Assembler IVP skipped."
fi

zospmswinstalled cbc
if [ $? -gt 0 ]; then
	ivpc
	if [ $? -gt 0 ]; then
		exit $?
	fi
else 
	echo "C IVP skipped."
fi

zospmswinstalled igy
if [ $? -gt 0 ]; then
	ivpcobol
	if [ $? -gt 0 ]; then
		exit $?
	fi
else 
	echo "COBOL IVP skipped."
fi

zospmswinstalled ibm
if [ $? -gt 0 ]; then
	ivppli
	if [ $? -gt 0 ]; then
		exit $?
	fi
else 
	echo "PL/I IVP skipped."
fi

deletedatasets

exit 0
